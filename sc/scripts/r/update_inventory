#!C:/Perl64/bin/perl

use strict;
#use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Carp;

use CGI;
use JSON::XS;
use Data::Dumper;

use SC;
use API::User;
use API::APIUtil;
use API::Event;

SC->initialize;
my $default_options = API::APIUtil::config_options();

my $self = new CGI;
my $action = ($self->param('program')) ? $self->param('program') : $ARGV[0];
my $filename = ($self->param('filename')) ? $self->param('filename') : $ARGV[1];
my $param = ($self->param('option')) ? $self->param('option') : $ARGV[2];
$param = '-'.$param if ($param);

my @args = ($action, $filename, $param);
my $action = shift @args;
my $sc_home = SC->config->{'RootDir'};
my $data_home = SC->config->{'DataRoot'};

print "Content-Type: application/json\n\n";

# Authenticated
my $username = $self->param('username') || '';
my $password = $self->param('password') || '';
my $valid = API::User->validate($username, $password, 1);
#return 1 unless $valid;

if (not defined *{$action}) {
} else {
    SC->log(0, "user: task is $action $args[0]");

	no strict 'refs';
    # perform the requested action
    #eval {
	my $json =  &{ $action }( @args );
	print JSON::XS->new->utf8->encode(API::APIUtil::stringfy($json));
    #};
}

exit;
    # Authenticated
sub shake_fetch {
    my ($event_id, $net_id) = @_;
    
    $net_id =~ s/^\-//;
    my $sc_id = $net_id;
    if ($net_id =~ /sc/i) {
	$sc_id = 'ci';
    } elsif ($net_id =~ /global/i) {
	$sc_id = 'us';
    }
    $sc_id .= $event_id;
    
    my $result = `$sc_home/bin/manage_event.pl -delete -verbose $sc_id`;

    SC->log(0, "erase event: $sc_id, $result");
	
	my $cmd = "$sc_home/bin/shake_fetch.pl -force_run -scenario -verbose -network $net_id -event $event_id";
	SC->log(0, $cmd);
	$result =  `$cmd`;
	
	my $json = {};
	$json->{prog} = $cmd;
	$json->{result} = $result;

	return $json;
}

    # Authenticated
sub scenario_event {
	my ($filename) = @_;
	
	my $result = new API::Event->erase_event($filename);
	use File::Copy;
	$result = move ("$sc_home/tmp/$filename", "$data_home/$filename");
    SC->log(0, "scenario_event: $sc_home/tmp/$filename, $data_home/$filename, $result");
	
	my $bin_file = "$sc_home/bin/scfeed_local.pl -force_run -scenario -event ";
	my $cmd = "$bin_file $filename";
	
	my $json = {};
	$json->{prog} = $cmd;
	$json->{result} = `$cmd -verbose`;

	return $json;
}

    # Authenticated
sub test_event {
	my ($filename) = @_;
	
	use File::Copy;
	my $result = move ("$sc_home/tmp/$filename", "$sc_home/test_data/$filename");
	
	my $json = {};
	$json->{result} = $result;

	return $json;
}

    # Authenticated
sub manage_facility_xml {
	my ($filename, $param) = @_;
	my $bin_file = "$sc_home/bin/manage_facility_xml.pl";
	my $file_path = "$sc_home/tmp/$filename";
	my $cmd = "$bin_file $param \"$file_path\"";
	
	my $json = {};
	$json->{prog} = $cmd;
	$json->{result} = `$cmd -verbose`;

	return $json;
}


    # Authenticated
sub manage_facility {
	my ($filename, $param) = @_;
	my $bin_file = "$sc_home/bin/manage_facility.pl";
	my $file_path = "$sc_home/tmp/$filename";
	my $cmd = "$bin_file $param \"$file_path\"";
	
	my $json = {};
	$json->{prog} = $cmd;
	$json->{result} = `$cmd -verbose`;

	return $json;
}


    # Authenticated
sub manage_user {
	my ($filename, $param) = @_;
	my $bin_file = "$sc_home/bin/manage_user.pl";
	my $file_path = "$sc_home/tmp/$filename";
	my $cmd = "$bin_file $param \"$file_path\"";
	
	my $json = {};
	$json->{prog} = $cmd;
	$json->{result} = `$cmd -verbose`;

	return $json;
}

    # Authenticated
sub manage_group {
	my ($filename, $param) = @_;
	my $bin_file = "$sc_home/bin/manage_group.pl";
	my $file_path = "$sc_home/tmp/$filename";
	my $cmd = "$bin_file $param -conf \"$file_path\"";
	
	my $json = {};
	$json->{prog} = $cmd;
	$json->{result} = `$cmd -verbose`;

	return $json;
}


