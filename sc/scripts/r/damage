#!/usr/local/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Carp;

use CGI;
use JSON::XS;

use SC;
use API::Damage;
use API::APIUtil;

SC->initialize;
my $default_options = API::APIUtil::config_options();

my $self = new CGI;
my (@args) = split '/', $ENV{PATH_INFO};
shift @args;
my $action = shift @args;

print "Content-Type: application/json\n\n";
if (not defined *{$action} ) {
} else {
    SC->log(0, "damage: task is $action $args[0]");

	no strict 'refs';
    # perform the requested action
    #eval {
	my $json =  &{ $action }( @args );
	print JSON::XS->new->utf8->encode(API::APIUtil::stringfy($json));
    SC->log(0, "damage: task is $json");
    #};
}

    # Authenticated
sub from_id {
	my ($shakemap) = @_;
	my ($shakemap_id, $shakemap_version) = split '-', $shakemap;
	my @facility;

	my $start = ($self->param('start')) ? ($self->param('start'))-1 : 0;
    my $type = $self->param('type');
    my $action = $self->param('action');
	push @facility, (split ',', $self->param('facility')) 
		if $self->param('facility');
	my $options = { 'shakemap_id' => $shakemap_id,
			'shakemap_version' => $shakemap_version,
			'start' => $start,
			'type' => $type,
			'action' => $action,
			'facility' => \@facility};
	my $damage = new API::Damage->from_id($options);
	$damage->{'type'} = $type;
	if ($action =~ /summary/i) {
		$damage = {'count' => $damage->{'count'},
				'damage_summary' => $damage->{'damage_summary'}
				};
	}

	return ($damage);
}

sub datatables {
	my ($shakemap) = @_;
    my @facility;
    my ($shakemap_id, $shakemap_version) = split '-', $shakemap;
    my $action = $self->param('action');
    my $start =  ($self->param('start')) ? ($self->param('start'))-1 : 0;
    my $length = ($self->param('length')) ? $self->param('length') : 
      (($default_options->{'topics_per_page'}) ? $default_options->{'topics_per_page'} : 200);
    my $type = ($self->param('type')) ? uc($self->param('type')) : 'ALL';

    my $count;

	push @facility, (split ',', $self->param('facility')) 
		if $self->param('facility');
	my $options = { 'shakemap_id' => $shakemap_id,
			'shakemap_version' => $shakemap_version,
			'type' => $type,
			'action' => $action,
			'start' => $start,
			'length' => $length,
			'facility' => \@facility};
	my $damage = new API::Damage->from_id($options);
	$damage->{'type'} = $type;
	$damage->{"total"} = $damage->{'count'};    
	$damage->{"start"} = $start;
	$damage->{"length"} = scalar keys %{$damage->{'facility_damage'}};
	if ($action =~ /summary/i) {
		$damage = {'count' => $damage->{'count'},
				'damage_summary' => $damage->{'damage_summary'}
				};
	}

	return $damage;
  };

